rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // ===== FUNKCJE POMOCNICZE =====
    
    // Sprawdza czy użytkownik jest zalogowany
    function isAuthenticated() {
      return request.auth != null;
    }

    // Sprawdza czy request pochodzi z Cloud Functions
    function isCloudFunction() {
      return request.auth.uid == null && request.auth.token.firebase.sign_in_provider == 'google.com';
    }

    // Sprawdza czy zalogowany użytkownik jest administratorem
    function isAdmin() {
      return isAuthenticated() && 
        request.auth.token.email == "kajuchu@gmail.com";
    }

    // Walidacja przesyłanych plików zdjęć
    function isValidImageFile() {
      return request.resource.size <= 50 * 1024 * 1024  // 50MB limit
         && (request.resource.contentType == 'image/jpeg' 
             || request.resource.contentType == 'image/jpg')
         && request.resource.metadata.size() > 0;  // Wymaga metadanych
    }

    // Walidacja plików watermark
    function isValidWatermarkFile() {
      return request.resource.size <= 50 * 1024 * 1024  // 50MB limit
         && request.resource.contentType == 'image/png'
         && request.resource.metadata.size() > 0;
    }

    // Walidacja plików systemowych (.keep)
    function isValidSystemFile() {
      return request.resource.size < 1024;  // max 1KB
    }

    // ===== REGUŁY DLA ALBUMÓW I PODFOLDERÓW =====
    match /albums/{albumId}/{fileName} {
      // Sprawdza czy użytkownik jest właścicielem albumu
      function isAlbumOwner() {
        let albumDoc = firestore.get(/databases/(default)/documents/albums/$(albumId));
        return isAuthenticated() && albumDoc != null && 
          request.auth.uid == albumDoc.data.author.uid;
      }

      // Bezpośredni upload zdjęć do albumu
      allow create, update: if isAlbumOwner() && 
        request.resource.size <= 50 * 1024 * 1024 && 
        (request.resource.contentType == 'image/jpeg' || request.resource.contentType == 'image/jpg');
    }

    match /albums/{albumId}/{subFolder}/{fileName} {
      // Sprawdza czy użytkownik jest właścicielem albumu
      function isAlbumOwner() {
        let albumDoc = firestore.get(/databases/(default)/documents/albums/$(albumId));
        return isAuthenticated() && albumDoc != null && 
          request.auth.uid == albumDoc.data.author.uid;
      }
      
      // Publiczny dostęp do odczytu dla photo-original i photo-watermarked
      allow read: if subFolder in ['photo-original', 'photo-watermarked'];
      
      // Dostęp do watermark-png tylko dla właściciela albumu
      allow read: if subFolder == 'watermark-png' ? isAlbumOwner() : true;
      
      // Tworzenie plików .keep
      allow create: if isAuthenticated() && fileName == '.keep';
      
      // Upload plików z odpowiednią walidacją w zależności od typu
      allow create, update: if (isAlbumOwner() || isCloudFunction()) && (
        (subFolder == 'photo-original' && isValidImageFile()) ||
        (subFolder == 'photo-watermarked' && isValidImageFile()) ||
        (subFolder == 'watermark-png' && isValidWatermarkFile())
      );
      
      // Usuwanie dozwolone dla właściciela lub admina
      allow delete: if isAlbumOwner() || isAdmin();
    }

    // ===== REGUŁY DLA INDYWIDUALNYCH ZDJĘĆ =====
    match /images/{userId}/{allPaths=**} {
      // Publiczny dostęp do odczytu zdjęć
      allow read: if true;
      
      // Tylko właściciel może dodawać/aktualizować swoje zdjęcia
      allow create, update: if isImageOwner(userId) && isValidImageFile();
      
      // Właściciel lub admin może usuwać zdjęcia
      allow delete: if isImageOwner(userId) || isAdmin();
    }

    // ===== REGUŁY DLA METADANYCH =====
    match /metadata/{document=**} {
      allow read: if true;
      
      // Tylko zalogowani użytkownicy mogą modyfikować metadane
      allow write: if isAuthenticated();
    }

    // ===== REGUŁY DLA EDYTOWANYCH ZDJĘĆ =====
    match /edited/{userId}/{allPaths=**} {
      // Dostęp do edytowanych wersji zdjęć
      allow read: if true;
      
      // Tylko właściciel może zapisywać edytowane wersje
      allow create, update: if isImageOwner(userId) && isValidImageFile();
      allow delete: if isImageOwner(userId) || isAdmin();
    }
  }
}