rules_version = '2';

// Reguły dla Cloud Firestore
service cloud.firestore {
  match /databases/{database}/documents {
    // Funkcje pomocnicze
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/settings/admin) &&
        get(/databases/$(database)/documents/settings/admin).data.email == request.auth.token.email;
    }

    function isValidAlbum(album) {
      return album.name is string &&
             album.name.size() >= 3 &&
             album.name.size() <= 100 &&
             album.author.uid is string &&
             album.isPublic is bool &&
             album.createdAt is string;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Reguły dla users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if request.auth.uid == userId;
    }

    // Reguły dla albums
    match /albums/{albumId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid);
        
      // Specjalne reguły dla prywatnych albumów
      match /{document=**} {
        allow read: if !resource.data.isPrivate || 
          (isAuthenticated() && isOwner(resource.data.ownerId));
        allow write: if isAuthenticated() && 
          isOwner(resource.data.ownerId);
      }
    }

    // Reguły dla settings
    match /settings/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(); 
      
    }

    // Reguły dla transactions
    match /transactions/{transactionId} {
      function isValidTransaction() {
        return request.resource.data.keys().hasAll(['buyerId', 'sellerId', 'photoId', 'amount', 'status', 'createdAt']) &&
               request.resource.data.buyerId == request.auth.uid;
      }

      // Uproszczone reguły dla transakcji
      allow read: if isAuthenticated();
      
      // Pozwól na tworzenie transakcji zalogowanym użytkownikom
      allow create: if isAuthenticated();
      
      // Pozwól na aktualizację statusu
      allow update: if isAuthenticated();
    }

    // Reguły dla payment_callbacks
    match /payment_callbacks/{callbackId} {
      allow create: if true;
      allow read: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Reguły dla purchased_photos
    match /purchased_photos/{purchaseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if false;
      allow delete: if isAdmin();
    }

    // Reguły dla payment_settings
    match /payment_settings/{document} {
      allow read: if true; // Publiczny dostęp do informacji o cenach
      allow write: if isAdmin(); // Tylko admin może modyfikować ustawienia płatności
    }

    // Reguły dla photos
    match /photos/{photoId} {
      function hasValidPurchase() {
        return 
          // Sprawdź purchased_photos
          exists(/databases/$(database)/documents/purchased_photos) &&
          get(/databases/$(database)/documents/purchased_photos)
            .data.photoId == photoId &&
          get(/databases/$(database)/documents/purchased_photos)
            .data.buyerId == request.auth.uid
          ||
          // Sprawdź transactions
          exists(/databases/$(database)/documents/transactions) &&
          get(/databases/$(database)/documents/transactions)
            .data.photoId == photoId &&
          get(/databases/$(database)/documents/transactions)
            .data.buyerId == request.auth.uid &&
          get(/databases/$(database)/documents/transactions)
            .data.status == 'completed';
      }

      allow read: if true;
      
      allow write: if 
        isAuthenticated() &&
        (
          // Właściciel może zawsze
          resource.data.ownerId == request.auth.uid ||
          // Publiczne zdjęcia dostępne dla wszystkich
          resource.data.type == 'public' ||
          // Zakupione zdjęcia
          hasValidPurchase()
        );
    }
  }
}