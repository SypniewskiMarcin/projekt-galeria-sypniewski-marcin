rules_version = '2';

// Reguły dla Cloud Firestore
service cloud.firestore {
  match /databases/{database}/documents {
    // Funkcje pomocnicze
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/settings/admin) &&
        get(/databases/$(database)/documents/settings/admin).data.email == request.auth.token.email;
    }

    // Rozszerzona walidacja albumu z obsługą watermarków
    function isValidAlbum(album) {
      let hasValidWatermark = !('watermarkSettings' in album) || (
        album.watermarkSettings.enabled is bool &&
        album.watermarkSettings.type in ['text', 'image'] &&
        album.watermarkSettings.visibility in ['visible', 'hidden'] &&
        (album.watermarkSettings.type == 'text' ? album.watermarkSettings.text is string : true) &&
        (album.watermarkSettings.type == 'image' ? album.watermarkSettings.imageUrl is string : true)
      );
      
      return album.name is string &&
             album.name.size() >= 3 &&
             album.name.size() <= 100 &&
             album.author.uid is string &&
             album.isPublic is bool &&
             album.createdAt is string &&
             hasValidWatermark &&
             (!('editedPhotos' in album) || album.editedPhotos is map);
    }

    // Walidacja zdjęcia
    function isValidPhoto(photo) {
      return photo.name is string &&
             photo.originalUrl is string &&
             photo.uploadedAt is string &&
             photo.processed is bool &&
             (!('watermarkedUrl' in photo) || photo.watermarkedUrl is string);
    }

    // Walidacja komentarza
    function isValidComment(comment) {
      return comment.albumId is string &&
             comment.userId is string &&
             comment.userEmail is string &&
             comment.content is string &&
             comment.content.size() > 0 &&
             comment.createdAt is string &&
             (comment.rating is number || !('rating' in comment)) &&
             (!('photoId' in comment) || comment.photoId is string);
    }

    // Reguły dla users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if request.auth.uid == userId;
      
      match /editedPhotos/{photoId} {
        allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
        allow write: if request.auth.uid == userId;
      }
    }

    // Reguły dla albums
    match /albums/{albumId} {
      allow read: if resource.data.isPublic == true || 
                  (request.auth != null && 
                   (resource.data.author.uid == request.auth.uid || isAdmin()));
      allow create: if isAuthenticated() && 
                    request.resource.data.author.uid == request.auth.uid &&
                    isValidAlbum(request.resource.data);
      allow update: if isAuthenticated() && 
                    (resource.data.author.uid == request.auth.uid || isAdmin()) &&
                    (!request.resource.data.diff(resource.data).affectedKeys()
                      .hasAny(['author', 'createdAt']) || isAdmin());
      allow delete: if isAuthenticated() && 
                    (resource.data.author.uid == request.auth.uid || isAdmin());

      // Reguły dla zdjęć w albumie
      match /photos/{photoId} {
        allow read: if get(/databases/$(database)/documents/albums/$(albumId)).data.isPublic == true ||
                    (request.auth != null && 
                     (get(/databases/$(database)/documents/albums/$(albumId)).data.author.uid == request.auth.uid || 
                      isAdmin()));
        allow create: if request.auth != null && 
                     get(/databases/$(database)/documents/albums/$(albumId)).data.author.uid == request.auth.uid &&
                     isValidPhoto(request.resource.data);
        allow update: if request.auth != null && 
                     get(/databases/$(database)/documents/albums/$(albumId)).data.author.uid == request.auth.uid &&
                     isValidPhoto(request.resource.data) &&
                     (!request.resource.data.diff(resource.data).affectedKeys()
                       .hasAny(['originalUrl', 'name', 'uploadedAt']) || isAdmin());
        allow delete: if request.auth != null && 
                     get(/databases/$(database)/documents/albums/$(albumId)).data.author.uid == request.auth.uid;
      }

      match /editedPhotos/{photoId} {
        allow read: if get(/databases/$(database)/documents/albums/$(albumId)).data.isPublic == true ||
                    (request.auth != null && 
                     (get(/databases/$(database)/documents/albums/$(albumId)).data.author.uid == request.auth.uid || 
                      isAdmin()));
        allow write: if request.auth != null && 
                     get(/databases/$(database)/documents/albums/$(albumId)).data.author.uid == request.auth.uid;
      }
    }

    // Reguły dla comments
    match /comments/{commentId} {
      // Każdy może czytać komentarze
      allow read: if true;
      
      // Tylko zalogowani użytkownicy mogą dodawać komentarze
      allow create: if 
        isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.albumId is string &&
        request.resource.data.content is string &&
        request.resource.data.content.size() > 0;
      
      // Użytkownik może usunąć tylko swój komentarz
      allow delete: if 
        isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      
      // Nie pozwalamy na edycję komentarzy
      allow update: if false;
    }

    // Reguły dla settings
    match /settings/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(); 
    }

    // Reguły dla transactions
    match /transactions/{transactionId} {
      allow read: if request.auth != null && 
        (resource.data.buyerId == request.auth.uid || 
         resource.data.sellerId == request.auth.uid || 
         isAdmin());
      allow create: if request.auth != null && 
        request.resource.data.buyerId == request.auth.uid;
      allow update: if false;
    }
  }
}